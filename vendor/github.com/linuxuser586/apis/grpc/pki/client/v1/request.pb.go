// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: protos/pki/client/v1/request.proto

package v1 // import "github.com/linuxuser586/apis/grpc/pki/client/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CertRequest holds the data to ruturn from the ClientService
type CertRequest struct {
	// subjects holds any number of ip and host
	Subjects []string `protobuf:"bytes,1,rep,name=subjects" json:"subjects,omitempty"`
	// password is optional and only used when requesting
	// a eystore and truststore for Java in PKCS#12 format
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (m *CertRequest) Reset()         { *m = CertRequest{} }
func (m *CertRequest) String() string { return proto.CompactTextString(m) }
func (*CertRequest) ProtoMessage()    {}
func (*CertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_04f932f81260c494, []int{0}
}
func (m *CertRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertRequest.Merge(dst, src)
}
func (m *CertRequest) XXX_Size() int {
	return m.Size()
}
func (m *CertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CertRequest proto.InternalMessageInfo

func (m *CertRequest) GetSubjects() []string {
	if m != nil {
		return m.Subjects
	}
	return nil
}

func (m *CertRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// CertResponse contains data with the key/cert pair
type CertResponse struct {
	// key is the private key or keystore in PKCS#12 format
	// if a password was supplied in the request
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// key is the public certificate or truststore in PKCS#12
	// format if a password was supplied in the request
	Cert string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *CertResponse) Reset()         { *m = CertResponse{} }
func (m *CertResponse) String() string { return proto.CompactTextString(m) }
func (*CertResponse) ProtoMessage()    {}
func (*CertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_04f932f81260c494, []int{1}
}
func (m *CertResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertResponse.Merge(dst, src)
}
func (m *CertResponse) XXX_Size() int {
	return m.Size()
}
func (m *CertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CertResponse proto.InternalMessageInfo

func (m *CertResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CertResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func init() {
	proto.RegisterType((*CertRequest)(nil), "linuxuser586.pki.client.v1.CertRequest")
	proto.RegisterType((*CertResponse)(nil), "linuxuser586.pki.client.v1.CertResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClientServiceClient interface {
	// NewCert requests a new TLS certificate
	NewCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error)
}

type clientServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientServiceClient(cc *grpc.ClientConn) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) NewCert(ctx context.Context, in *CertRequest, opts ...grpc.CallOption) (*CertResponse, error) {
	out := new(CertResponse)
	err := c.cc.Invoke(ctx, "/linuxuser586.pki.client.v1.ClientService/NewCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
type ClientServiceServer interface {
	// NewCert requests a new TLS certificate
	NewCert(context.Context, *CertRequest) (*CertResponse, error)
}

func RegisterClientServiceServer(s *grpc.Server, srv ClientServiceServer) {
	s.RegisterService(&_ClientService_serviceDesc, srv)
}

func _ClientService_NewCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).NewCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/linuxuser586.pki.client.v1.ClientService/NewCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).NewCert(ctx, req.(*CertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "linuxuser586.pki.client.v1.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCert",
			Handler:    _ClientService_NewCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pki/client/v1/request.proto",
}

func (m *CertRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Password) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Password)))
		i += copy(dAtA[i:], m.Password)
	}
	return i, nil
}

func (m *CertResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Cert) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Cert)))
		i += copy(dAtA[i:], m.Cert)
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CertRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subjects) > 0 {
		for _, s := range m.Subjects {
			l = len(s)
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func (m *CertResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CertRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subjects = append(m.Subjects, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("protos/pki/client/v1/request.proto", fileDescriptor_request_04f932f81260c494)
}

var fileDescriptor_request_04f932f81260c494 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0x8a, 0xb8, 0x18, 0x90, 0x90, 0xa7, 0x2a, 0x83, 0x55, 0x65, 0xa1, 0x93, 0xad,
	0x72, 0x13, 0x33, 0x15, 0x03, 0x0b, 0x43, 0xd9, 0x18, 0x90, 0x1a, 0x73, 0x54, 0x4c, 0x4a, 0x6c,
	0x7c, 0xec, 0x14, 0xde, 0x82, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x92, 0x17, 0x41, 0x71, 0x00, 0x95,
	0x01, 0xb1, 0x9d, 0xa3, 0xff, 0xa2, 0x4f, 0x3f, 0xcd, 0xac, 0x33, 0xde, 0xa0, 0xb4, 0x85, 0x96,
	0x6a, 0xae, 0xa1, 0xf4, 0xb2, 0x1a, 0x49, 0x07, 0x4f, 0x01, 0xd0, 0x8b, 0x28, 0xb2, 0x74, 0xae,
	0xcb, 0xf0, 0x1c, 0x10, 0xdc, 0xc9, 0xd9, 0xa9, 0xb0, 0x85, 0x16, 0x9d, 0x53, 0x54, 0xa3, 0xec,
	0x82, 0xee, 0x8c, 0xc1, 0xf9, 0x49, 0x17, 0x60, 0x29, 0xdd, 0xc2, 0x90, 0x3f, 0x80, 0xf2, 0xd8,
	0x27, 0x83, 0xde, 0x70, 0x7b, 0xf2, 0xf3, 0xb7, 0x9a, 0x9d, 0x22, 0x2e, 0x8c, 0xbb, 0xeb, 0xaf,
	0x0d, 0x48, 0xab, 0x7d, 0xff, 0xd9, 0x31, 0xdd, 0xed, 0x6a, 0xd0, 0x9a, 0x12, 0x81, 0xed, 0xd3,
	0x5e, 0x01, 0x2f, 0x7d, 0x12, 0x6d, 0xed, 0xc9, 0x18, 0x5d, 0x57, 0xe0, 0xfc, 0x57, 0x32, 0xde,
	0x87, 0x86, 0xee, 0x8d, 0x23, 0xc9, 0x35, 0xb8, 0x4a, 0x2b, 0x60, 0xb7, 0x74, 0xf3, 0x0a, 0x16,
	0x6d, 0x13, 0x3b, 0x10, 0x7f, 0x53, 0x8b, 0x15, 0xe4, 0x74, 0xf8, 0xbf, 0xb1, 0x83, 0xca, 0x92,
	0xf3, 0xcb, 0xb7, 0x9a, 0x93, 0x65, 0xcd, 0xc9, 0x47, 0xcd, 0xc9, 0x6b, 0xc3, 0x93, 0x65, 0xc3,
	0x93, 0xf7, 0x86, 0x27, 0x37, 0x72, 0xa6, 0xfd, 0x7d, 0xc8, 0x85, 0x32, 0x8f, 0x72, 0xb5, 0x4f,
	0x4e, 0xad, 0x46, 0x39, 0x73, 0x56, 0xfd, 0x9e, 0x38, 0xdf, 0x88, 0xdb, 0x1e, 0x7d, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x95, 0x95, 0x8c, 0x83, 0x81, 0x01, 0x00, 0x00,
}
